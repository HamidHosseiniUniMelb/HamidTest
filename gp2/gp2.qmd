---
title: "gp2"
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>. hhhhhhhhhhhhhhhhhh

pgr-createTopology
“pgr_createTopology” is a pgRouting function that prepares a network dataset for routing by building a topology (nodes and edges) from a set of geometries (linear features like roads, railways, etc.). The signature of the function is as follows:
pgr_createTopology(
    edge_table text,  	--Name of the table containing linear data (e.g., us_interstates)
    tolerance float8, 	--Snapping tolerance 
    the_geom text, 		--Name of the geometry column in the linear data (e.g., geom)
    id text, 			--Unique identifier column for edges
    source text DEFAULT 'source', 	--The new column that will hold start node IDs
    target text DEFAULT 'target', 	--The new columns that will hold end nodes IDs
    clean boolean DEFAULT false 	--If true, deletes old source/target values
)

To create a topology for a linear feature (e.g., us_interstates), you first need to add the source, target, and edge_id columns, and then execute the topology creation function as follows:
-- Create a copy of the linear feature in my schema
CREATE TABLE userName.us_interstates as (SELECT * FROM spatial.us_interstates)

-- Add 'source' and 'target' columns; integer type
ALTER TABLE userName.us_interstates ADD COLUMN 'source' integer
ALTER TABLE userName.us_interstates ADD COLUMN 'target' integer

-- Add 'edge_id' column; integer type and unique constraint
ALTER TABLE userName.us_interstates ADD COLUMN edge_id serial unique

-- Run topology function
SELECT pgr_createTopology('userName.us_interstates', 0.00001, 'geom', 'edge_id')

Table 1: Possible returned results
 	 
Description: Something went wrong, so the topology was not created.	Description: The topology was successfully created.

When pgr_createTopology is executed (with OK result), the source and target columns of the edge table are automatically populated with node IDs, and a corresponding vertices table named userName.tableName_vertices_pgr is generated. This vertices table stores the unique nodes of the network and serves as a reference for graph traversal. Once the topology is established, the full suite of pgRouting functions (e.g., pgr_dijkstra for shortest path analysis) can be applied to perform network analysis.

Notes:
•	The source and target columns must be of an integer data type, as they represent the IDs of the nodes in the network graph.
•	The values of the source and target columns are automatically populated during topology creation by pgr_createTopology.
•	The edge_id column must be of an integer data type (e.g., INTEGER, SERIAL), and have a UNIQUE constraint, as it serves as the unique identifier of the edges, preventing duplicate records.
•	Unlike source and target, the values of the edge_id column are not generated automatically during topology creation and must exist beforehand. Therefore, defining it as a SERIAL (auto-incrementing integer) is strongly recommended.
•	Snapping tolerance is the distance threshold used when creating a topology to decide whether two vertices (line endpoints) should be treated as the same node.

